1. npm init
2. tạo thư mục src và tạo entry file app.js
3. npm i express
4. tạo server đầu tiên, tạo router handler đầu tiên
5. npm i -g nodemon 
6. vào package.json scripts gõ "start": "node src/app.js", "dev": "nodemon src/app.js"
7. khác biệt giữa app.use() và app.get() 
8. regular expression áp dụng cho route (+*? ())
9. đọc query và params từ request object
10. nếu route handler ko có trả về gì hết ==> timeout 
11. 1 route có nhiều route handler và sử dụng next() để kết nối các route handler
12. định nghĩa lại route handler và midleware handler
13. what is midleware? how express js handled request behinds the scence
-------------
tại sao cần nodemon? 
(mỗi lần cập nhật code là phải ctrl c rồi node src/app.js rất phiền)
nodemon src/app.js giống hệt node src/app.js nhưng mỗi lần save code thì node tự khởi động lại server 
sau này ta chỉ cần gõ nodemon src/app.js hoặc npm run dev là được
--------------
tại sao có package.json lại còn có thêm package-lock.json nữa? 
1. package.json dùng để lưu các dependencies mà mình tự tay cài vào bằng lệnh npm i express, npm i electron
nhưng express, electron cũng có những dependencies khác như babel, etag,... 
file package-lock.json được dùng để lưu babel, etag.... (lưu dependencies of dependencies)
2. package.json lưu ^4.19.2 nhưng chưa chắc cái mà app của mình đang dùng là 4.19.2 , có thể app mình đang dùng 4.20.2 
package-lock.json sẽ lưu version mà app mình đang dùng
--------------
4.19.2 
4 là major 
19 là minor
2 là patch 
update ở patch thường là fix bug, nếu 1 app đang cài express ở 4.19.2 , cài lên 4.19.5 thì mọi chức năng ko ảnh hướng 
update ở minor thường là new feature, nhưng có backward compatible, nếu 1 app đang cài express ở 4.19.2, cài lên 4.20.2 thì mọi chức năng cũ ko bị ảnh hưởng
update ở major thường là breaking changes (ko có backward compatible), nếu 1 app đang cài express ở 4.19.2, thì cài lên 5.0.0 thì mọi chức năng cũ có thể ko hoạt động như bình thường hoặc bị dừng luôn, mình phải viét lại app
------------------

quy ước: dependencies cấp 1: là dependencies mình tự tay cài bằng npm install electron chẳng hàn
dependencies cấp 2: là dependencies của electron, vd: etag
dependencies cấp 3: là dependencies của etag, vd xxx

nếu trên thế giới chỉ có file package.json , ko có vụ ^ ~ 
thì một mình package.json (chứa express và tất cả dependencies (dependencies ko có ^~ luôn)) thì thế giới hoà bình
nhưng vì có ~ và ^ (hướng dẫn update) nên mọi chuyện bắt đầu rắc rối
--------------------------
nếu trên thế giới chỉ có file package.json, ko có file package-lock.json, 
tất cả các cấp dependencies đều được lưu trong package.json
thi1: nếu có ~^ ở dependencies cấp 1 trong package.json
ở máy 1 đang ghi là express ~4.19.2
khi bưng file package.json từ máy 1 sang máy 2,
mình gõ npm install, thu được express 4.19.5 ở máy 2 (vì ~ cho phép)
===> ngay tại đây đã thấy 2 máy khác nhau rồi

th2: khi ko ~ ^ ở dependency cấp 1 trong package.json, cấp 2 và cấp 3 có ~ ^
ở máy 1 đang ghi là express 4.19.2, etag ~1.1.1
khi bưng file package.json từ máy 1 sang máy 2, 
mình gõ npm install, thu được express 4.19.2 ok giống máy 1
nhưng có thể etag 4.2.2 ở máy 2 (vì ~ cho phép)

bưng file package.json từ máy 1 sang máy 3, 
mình gõ npm install, thu được express 4.19.2 ok giống máy 1
nhưng có thể etag 4.2.5 ở máy 3 (vì ~ cho phép)

cho dù express fixed cứng ở 4.19.2, nhưng mỗi lần cài là có một bản etag khác nhau 
===> mình muốn khi đem app đến bất cứ máy lạ nào,
thì tất cả dependencies phải giống y hệt cái trong máy 1 của mình
===> npm giới thiệu package-lock.json, thong thường dependencies cấp 2 sẽ không có ~ ^ gì hết (để phục vụ mục đích fix cứng dependencies cấp 2)

package.json ở máy 1 đang ghi là express ^4.19.2, 
package-lock.json ở máy 1 đang ghi express 4.19.2 và etag 1.1.1 
khi bưng file package.json và package-lock.json từ máy 1 sang máy 2, 
nội dung 2 file giữ nguyên
khi ta chạy npm install
npm sẽ nhìn vào file package-lock.json sẽ cài chính xác express bản 4.19.2, etag bản 1.1.1 giống máy 1
chỉ khi nào ở máy 2, ta chạy npm update thì npm mới nhìn vào package.json để xem hướng dẫn update (~^)
--------------------
tóm lại: khi bưng sang máy khác, npm install nhìn vào file package-lock.json để cài chính xác version
khi bưng sang máy khác, sau khi npm install, nếu ta bấm thêm npm update thì npm sẽ nhìn vào file package.json để update
-----------trong file package-lock.json, ta hay thấy dependencies cấp 3 sẽ có thể có ~ và ^ 
xem ví dụ sau đây để hiểu: 
package.json ở máy 1 đang ghi là express ^4.19.2, 
package-lock.json ở máy 1 đang ghi express 4.19.2 và etag 1.1.1 , xxx là ^2.2.2
khi bưng file package.json và package-lock.json từ máy 1 sang máy 2, 
nội dung 2 file giữ nguyên
khi ta chạy npm install
npm sẽ nhìn vào file package-lock.json sẽ cài chính xác express bản 4.19.2, etag bản 1.1.1 giống máy 1
nhưng vì XXX là ^2.2.2 nên npm sẽ tìm bản mới nhất để cài vào (npm install thì xxx đã cài bản mới nhất, ko cần chờ tới npm update)
--------------------
tóm lại: 
package.json định nghĩa version nhỏ nhất của express và controles how updates are handled when you run npm update
package-lock.json ghi lại chính xác dependencies cấp 1 2 3 là version nào khi npm install

--------------
4.19.2 ko tự động cập nhật
^4.19.2 cho phép cập nhật 4.X.X
~4.19.2 cho phép cập nhật 4.19.X

-----------------
quá trình tạo file 
khi thư mục trống, mình gõ npm init -y thì file package.json được tạo, bên trong rỗng 
khi mình gõ npm install electron thì 
file package.json sẽ có thêm electron
file package-lock.json được tạo ra, chứa tất cả electron (dep cấp 1) và dep cấp 2 , dep cấp 3
---mình xoá node_modules, sau đó npm install lại 
th1: néu có đủ 2 file package.json và package-lock.json thì
Step 1: npm checks package-lock.json  và install for the exact versions of each package and its dependencies.
Step 2: npm check lại package.json, nếu có dep có trong package.json mà ko có trong package-lock.json thì cài theo hướng dẫn của package.json
------------
th2: nếu chỉ có package.json thì cài đại theo hướng dẫn của package.json
------------
th3: nếu chỉ có package-lock.json thì ko cài được gì do 
npm checks package.json to know dependencies cấp 1 là đứa nào (dù trong package-lock.json cũng có)
rồi sau đó mới ngó sang package-lock.json only to determine the exact version.
======> cho nên ai hỏi thì nói là cả 2 file đều cần thiết để đẩy lên git
-----------------
git ignore: ban đầu khi nhìn vào biểu tượng git ở góc trên trái (dưới biểu tượng kính lúp), ta thấy số 512... rất lớn, những thay đổi trong file này là của node_modules
mình ko cần node_modules được đẩy lên git làm gì vì mình đã có package.json và package-lock.json
======> tạo file tên .gitignore tại 
---dev_tinder_be 
    |_ .gitignore
thêm vào file .gitignore nội dung là 
node_modules/
để cẩn thận, ta chạy thêm lệnh dưới để loại node_modules ra khỏi git nếu những lần trước lỡ commit có node_modules
git rm -r --cached node_modules
====> vậy là xong, git add . như bình thường (bật git status lên để kiểm tra, lúc này git tự động loại bỏ node_modules)

-----------------
7. khác biệt giữa app.use() và app.get() 
//ta có thể dùng post method + /hi  hoặc put, hoặc patch hoặct get bất kỳ đều trả về 
app.use("/hi", (request, response)=>{
     response.send('/hi from server')
})
//ta chỉ nhận được kết quả khi dùng GET + /hi
app.get("/hi", (req, res)=>{
    res.send('hi from get method')
});

---------- 
thứ tự của các route rất quan trọng 
-----------
9. request's params : 
nếu 
app.get('/query/:userID',(req, res)=>{
    res.send(req.params);
})
thì khi 
localhost:8889/query/501230006 ====> req.params = {userID: 501230006}

request's query : 
nếu 
app.get('/query2',(req, res)=>{
    res.send(req.query);
})

thì localhost:8889/query2?productName=paracetamol&dose=500mg 
====> req.query = {
    "productName": "paracetamol",
    "dose": "500mg"
}